/*
     _______. __   __       __    ______   ______   .__   __. 
    /       ||  | |  |     |  |  /      | /  __  \  |  \ |  | 
   |   (----`|  | |  |     |  | |  ,----'|  |  |  | |   \|  | 
    \   \    |  | |  |     |  | |  |     |  |  |  | |  . `  | 
.----)   |   |  | |  `----.|  | |  `----.|  `--'  | |  |\   | 
|_______/    |__| |_______||__|  \______| \______/  |__| \__| 
                                                               
*/

/*
An Ohm PEG grammar for the Silicon programming language. This document is meant to be the official grammar specification for Silicon. There will be another documents for both semantics and tests to run. Silicon is a language design for web assembly. It is merely a higher level abstraction over WASM. Silicon is meant to be a gradually typed, gradually static, gradually memory managed language that works well for full-stack applications. It will later have its own package manager, framework, build tool, test tools, documentation tools etc.


 */

Silicon {
    keyword = "@" alnum+


  identifierStart = letter | "_"
                  | "\\" unicodeEscapeSequence -- escaped
  identifierPart = identifierStart | unicodeCombiningMark
                 | unicodeDigit | unicodeConnectorPunctuation
                 | "\u200C" | "\u200D"


}

Arithmetic {
    Exp
      = AddExp

    AddExp
      = AddExp "+" MulExp  -- plus
      | AddExp "-" MulExp  -- minus
      | MulExp

    MulExp
      = MulExp "*" ExpExp  -- times
      | MulExp "/" ExpExp  -- divide
      | ExpExp

    ExpExp
      = PriExp "^" ExpExp  -- power
      | PriExp

    PriExp
      = "(" Exp ")"  -- paren
      | "+" PriExp   -- pos
      | "-" PriExp   -- neg
      | ident
      | number

    /*
      The following rules have *descriptions*, which are optional parenthesized "comments" following
      the name of a rule in its declaration. Rule descriptions are used to produce better error
      messages when the input is not recognized. E.g., if you try to match the input "123" with the
      'ident' rule below, Ohm will say that "an identifier" was expected. Without ident's rule
      description, the error message would have said that "a letter" was expected -- which is true,
      but probably too low-level to be helpful. Note that 'letter', 'alnum', and 'digit' are built-in
      rules with their own descriptions (you can see their declarations in src/built-in-rules.ohm).
    */
    ident  (an identifier)
      = letter alnum*

    number  (a number)
      = digit* "." digit+  -- fract
      | digit+             -- whole
  }