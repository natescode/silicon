si {

  Program = SourceElement*
  SourceElement = AtBlock | Declaration
  AtBlock = "@" "" SourceElement* "" "@"

  Declaration = VariableDeclaration | SiFunctionDeclaration | SiCFunctionDeclaration | comment | BinaryMathOperation

  Assignment = (identifier | VariableDeclaration) "=" literal

  literal = number | stringLiteral
  number = integerLiteral+ | decimalLiteral+

  integerLiteral = (decimalDigit | "_")+
  decimalLiteral = decimalDigit? "." decimalDigit+
  
  stringLiteral =  "\"" doubleStringCharacter* "\""
  
  doubleStringCharacter = ~("\"" | "\\" | lineTerminator) sourceCharacter
 
  sourceCharacter = any
  
  decimalDigit = "0".."9"
  nonZeroDigit = "1".."9"
  
  binaryMathOperator = "+" | "-" | "*" | "/" | "^" | "%" 
  
  number_var = number | identifier
  
  BinaryMathOperation = number_var binaryMathOperator number_var (binaryMathOperator number_var)*
   
  Statement
    = SiFunctionDeclaration

  Function = "@fn"
  identifier = letter+ alnum?
  lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"

  VariableDeclaration = "@let" TypedIdentifier
  SiFunctionDeclaration = Function ("'" identifier)? (identifier ":" identifier) TypedParameterList lineTerminator? Declaration? "@"
  SiCFunctionDeclaration = Function ("'" identifier)? (identifier ":" identifier) TypedParameterList "{" Declaration? "}"

  TypeList = ListOf<TypeIdentifier,",">
  TypedParameterList  =  ListOf<TypedParameter, ",">
  FormalParameterList =  ListOf<FormalParameter, ",">
  FunctionBody = any

  TypeIdentifier =  "'"? identifier
  
  TypedIdentifier = (identifier | "_") (":" TypeIdentifier)?
  TypedParameter   = (identifier | "_") ":" identifier
  FormalParameter = identifier
  
  idline = identifier lineTerminator
  
  
  comment = multiLineComment | singleLineComment

  multiLineComment = "/*" (~"*/" sourceCharacter)* "*/"
  singleLineComment = "//" (~lineTerminator sourceCharacter)*
  
  }