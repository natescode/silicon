Silicon {
	Program   = SourceElement*
	SourceElement =
			| STATEMENT --sourceStatement
			| EXP ";" --sourceExp
	STATEMENT = | comment
    docComment = "###" (~"###" sourceCharacter)* "###"
    multiLineComment = "##" (~"##" sourceCharacter)* "##"
	singleLineComment = "#" (~lineTerminator sourceCharacter)*
	lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
	sourceCharacter = any
	EXP = 	| BinOpExp
			| Definition
			| FunctionCall
			| Literal
            | Name
            | OptionalWrapped<EXP> 
    IdenOrProp = identifier ("." identifier)*
    IdenOrNamespace = identifier ("::" identifier)* 
    Name = idenKeyword ("::" identifier)* ("." identifier)*
    Assign = "=" EXP
    idenKeyword = identifier | keyword
    IdenParams = idenKeyword Params
    Type = ":" OptionalWrapped<IdenParams>
    TypedIdentifier = identifier Type?
    Args = ListOf<EXP,",">
    Params = ListOf<TypedIdentifier,",">
	Definition = keyword TypedIdentifier Args Assign? 
	identifier = 
    	| discard
    	| letter+ ("_" | alnum)* --iden1
    	| "_" identifier+ --iden2
    discard = "_"
    Macro = "@@" identifier
    keyword = "@" identifier
	BinOpExp = EXP BinOp EXP
	FunctionCall = evalSigil Name Args
    evalSigil =  comptimeSigil | runtimeSigil
    runtimeSigil = "&"
    comptimeSigil = "&&"
	Literal = StringLiteral | BlockLiteral | MapLiteral | ArrayTupleLiteral | NumericLiteral | BooleanLiteral
	StringLiteral = "\"" stringChar*  "\""
	stringChar = ~("\"" | "\\" | lineTerminator) any
    BlockLiteral = "{" ListOf<EXP,";"> ";"? "}"
    KeyValue = TypedIdentifier Assign?
    MapLiteral = "[" ListOf<MapEntry,";"> "]"
    MapEntry = TypedIdentifier "=" EXP
	ArrayTupleLiteral = "[" ListOf<EXP,","> "]"
	NumericLiteral = | BinLiteral | HexLiteral | OctLiteral | FloatLiteral | IntLiteral
	BinLiteral = "0b" bit+ ("_" bit+)*
	HexLiteral = "0x" hexDigit+ ("_" hexDigit+)*
	OctLiteral = "0c" octDigit+ ("_" octDigit+)*
	FloatLiteral = digit+ ("_" digit+)* "." digit+
	IntLiteral = digit+ ("_" digit+)*
    BooleanLiteral = "$true" | "$false"
	BinOp =
			| "++" --concat
			| "+" --add
			| "-" --sub
            | "*" --mult
			| "/" --div
            | ".." --series
            | "..." --spread
            | keyword --keywordOp // for keyword binary operators such as @and @or etc...aaoeu				
	octDigit = "0".."7"
	bit = "0" | "1"
	booleanLiteral = "@true" | "@false"
	comment = docComment | multiLineComment | singleLineComment
    IdenOrLit<literal> = identifier | literal
    OptionalWrapped<rule> =
    	| rule --unwrapped
    	| "(" rule ")" --wrapped
	space := whitespace | lineTerminator
	unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"
	whitespace = "\t"
			| "\x0B"    -- verticalTab
			| "\x0C"    -- formFeed
			| " "
			| "\u00A0"  -- noBreakSpace
			| "\uFEFF"  -- byteOrderMark
			| unicodeSpaceSeparator
}