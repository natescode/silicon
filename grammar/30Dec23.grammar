Silicon {
  Program   = SourceElement*

  SourceElement = 
  				| STATEMENT ";"? --sourceStatement
                | EXP ";"? --sourceExp
 
  STATEMENT = singleLineComment | multiLineComment 
        
  EXP = 
  		| "@type" TypedIdentifier (identifier+ (":" identifier+)?)? Assign?  --typeDef 
  		| "@name" TypedIdentifier  (identifier+ (":" identifier+)?)? Assign? --letDef 
        | "@func" TypedIdentifier Args Assign? --fnDef
        | "@when" Args --whenDef
        | "@open" Args --import
  		| EXP BinOp EXP --compare
  		| EXP OpKeyword EXP -- binOpKeywordExp
 		| EXP ("+"| "-") EXP -- addExp
        | EXP ("*" | "/") EXP -- multExp
  		| EXP "<=" EXP -- lteEXP
       // | OpKeyword_not EXP --notEXP
        | "#" Args ("=>" identifier)+ --pipeExp
        | "#" (identifier | EXP) ("." identifier)+ --methodChainExp
        | identifier ("." identifier)+ --namespace
        | TypedIdentifier
        | identifier
        | num
        | "\"" stringChar*  "\"" --stringLit
        | "{" EXP "}" --block
        | "(" (identifier "=" EXP)* ")" --mapLit
        | "(" EXP* ")" -- parens
        | "[" ListOf<EXP,","> "]" --arrayLit
        | "#" identifier Args --fnCall
  
  BinOp =   	| "==" --equal
  				| "===" --identical
                | "<" --lt
                | ">" --gt
  				| "<=" --lte
  				| ">=" --gte
                | "!=" --notEqual
                | "!===" --notIdentical
  				//| "<>" --notequal
               // | "<=>" --notidentical
         
  OpKeyword =   | "@eq" --eq
  				| "@neq" --neq
  				| OpKeyword_not? "@is" --is
  				| "@and" --and
  				| "@or" --or
              	| "@not" --not
              	| "@b_and" --band
              	| "@b_or" --bor
              	| "@b_xor" --bxor
              	| "@b_not" --bnot
              	| "@b_nand" --bnand
              	| "@b_nor" --bnor
              	| "@b_xnor" --bxnor
                | "@name" TypedIdentifier Params --nameExp
                | "@when" Args -- whenExp 
                | "@loop" Args -- loopExp
                | "@func" Args -- funcExp
                | "@open" Args --import
                | booleanLiteral --booleanLit
      
  stringChar = ~("\"" | "\\" | lineTerminator) any
  lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
  booleanLiteral = "@true" | "@false"
  namespace = identifier ("::" identifier)+
  num = digit+
  identifier = letter+
  TypedIdentifier = identifier (":" identifier)?
  Args  = ListOf<EXP+, ",">
  Params = ListOf<TypedIdentifier+,",">
  ParamArgs = Params | Args
  Assign = "=" EXP --id
  comment = multiLineComment | singleLineComment
  sourceCharacter = any
  multiLineComment = "/*" (~"*/" sourceCharacter)* "*/"
  singleLineComment = "//" (~lineTerminator sourceCharacter)*
  space := whitespace | lineTerminator | comment
  unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"
  whitespace = "\t"
             | "\x0B"    -- verticalTab
             | "\x0C"    -- formFeed
             | " "
             | "\u00A0"  -- noBreakSpace
             | "\uFEFF"  -- byteOrderMark
             | unicodeSpaceSeparator
}