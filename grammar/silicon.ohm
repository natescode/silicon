si {

  Program = SourceElement*
  SourceElement = AtBlock | C_Block | Declaration | Expr
  
  C_Block = "{" SourceElement* "}"
  
  Sigil =  "@" | "$" | "&" | "->" | "~" | "_" 
  
  AtBlock = "@" "" SourceElement* "" "@"

  Declaration = comment | DEF | BinaryMathOperation

  Keyword = "@fn" | "@type" | "@let"
  DEF = Keyword TypedIdentifier TypedParameterList? ("=" SourceElement*)?
  
  Assignment = (identifier | VariableDeclaration) "=" literal

  literal = number | stringLiteral | integerLiteral | decimalLiteral | bool_literal
  number = integerLiteral+ | decimalLiteral+
  operator = "+" | "-" | "*" | "/"
  // infix but really only used for maths
  MathExpr = number (operator number)*

  integerLiteral = decimalDigit+ ("_" decimalDigit+)*
  decimalLiteral = integerLiteral? "." decimalDigit+
  
  stringLiteral =  "\"" doubleStringCharacter* "\""
  
  doubleStringCharacter = ~("\"" | "\\" | lineTerminator) sourceCharacter
 
  sourceCharacter = any
  
  decimalDigit = "0".."9"
  nonZeroDigit = "1".."9"
  
  binaryMathOperator = "+" | "-" | "*" | "/" | "^" | "%" 
  
  number_var = number | identifier
  
  BinaryMathOperation = number_var binaryMathOperator number_var (binaryMathOperator number_var)*
  
  bool_literal = "true" | "false"

  Expr = MathExpr | Function_Call | If_Expr | literal

  Statement
    = FunctionDef | If_Expr | For_Expr | Compare_Expr

  // TODO: IF is just a built-in function
  If_Expr = "@if" identifier "," (AtBlock | C_Block)
  // TODO FOR is just a built-in function
  For_Expr = "@for" "range" "," (AtBlock | C_Block)
  Compare_Expr = (identifier | literal) "==" (identifier | literal)
  Function = "@fn"
  // TODO: Decide if # sigil stays or not
  // #add first,second
  // #add #add first,second,third
  // add(add(first),second)) ?? IDK LOLZ
  Function_Call = "#" identifier TypedParameterList
  //identifier = letter+ alnum?
  identifier = letter+ ("_" letter+)*
  lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"

  VariableDeclaration = "@let" TypedIdentifier ("=" literal)?
  FunctionDef = Function TypedIdentifier TypedParameterList ("=" (AtBlock | C_Block))?
 
  TypeList = ListOf<TypeIdentifier,",">
  TypedParameterList  =  ListOf<TypedParameter, ",">
  FormalParameterList =  ListOf<FormalParameter, ",">
  FunctionBody = any

  TypeIdentifier =  "'"? identifier
  
  TypedIdentifier = (identifier | "_") (":" TypeIdentifier)?
  TypedParameter   = (identifier | "_") (":" identifier)?
  FormalParameter = identifier
  
  idline = identifier lineTerminator
  
  
  comment = multiLineComment | singleLineComment

  multiLineComment = "/*" (~"*/" sourceCharacter)* "*/"
  singleLineComment = "//" (~lineTerminator sourceCharacter)*
  
  }