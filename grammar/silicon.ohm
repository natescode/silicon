Silicon {
	// TOP LEVEL EXPRESSIONS
	Program   = SourceElement*
	SourceElement = STATEMENT | EXP ";"
	STATEMENT = comment
	comment = multiLineComment | singleLineComment
	singleLineComment = "//" (~lineTerminator sourceCharacter)*
	lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"
	sourceCharacter = any
	multiLineComment = "/*" (~"*/" sourceCharacter)* "*/"
	EXP =   
			| BinOpExp
			| LambdaLiteral
			| Definition
			| Parens
			| MethodChainExp
			| FunctionCall
            | InfixExp
			| Macro
			| PipeExp
			| namespace
            | BlockLiteral
			| Literal
            | identifier

    //EXPRESSION RULES       
	BinOpExp = EXP BinOp EXP 
	LambdaLiteral = "\\" Args Assign
	Definition = Keyword TypedIdentifier Args Assign? 
	Parens = "(" EXP* ")" 
	MethodChainExp = evalSigil (identifier | EXP) ("." identifier)+ Args 
	FunctionCall = evalSigil identifier ListOf<EXP,","> 
	InfixExp = EXP InfixFunc EXP 
	Macro = "@@" identifier Args
	PipeExp = evalSigil EXP ("=>" identifier)+ 
	namespace = identifier ("::" identifier)+
	BlockLiteral = "{" (EXP ";")* "}"
	Literal = StringLiteral | BlockLiteral | MapLiteral | ArrayLiteral | NumericLiteral
	identifier = "_" | letter+

	// CORE RULES
	BinOp =   	
			| "**" --pow 
			| "++" --concat
			| "+" --add
			| "-" --sub
			| "*" --mult 
			| "/" --div
			| "==" --equal
			| "===" --identical
			| "<>" --notEqual
			| "<=>" --notIdentical
			| "<=" --lte
			| ">=" --gte
			| "<" --lt
			| ">" --gt

	Args  = ListOf<Arg, ",">
    Arg = TypedIdentifier | EXP
	Assign = "=" EXP
	Keyword = "@" identifier
    evalSigil =  comptimeSigil | runtimeSigil
	TypedIdentifier = identifier (":" ListOf<EXP,",">)*
    comptimeSigil = "##" 
    runtimeSigil = "#"
	InfixFunc = "\\\\" identifier

	// LITERALS
	StringLiteral = "\"" stringChar*  "\"" 
	stringChar = ~("\"" | "\\" | lineTerminator) any
	MapLiteral = "(" (identifier "=" EXP)* ")" 
	ArrayLiteral = "[" ListOf<EXP,","> "]" 
	NumericLiteral = | BinLiteral | HexLiteral | OctLiteral | FloatLiteral | IntLiteral  
	BinLiteral = "0b" bit+ ("_" bit+)* 
	HexLiteral = "0x" hexDigit+ ("_" hexDigit+)* 
	OctLiteral = "0c" octDigit+ ("_" octDigit+)* 
	FloatLiteral = digit+ ("_" digit+)* "." digit+ 
	IntLiteral = digit+ ("_" digit+)* 
	octDigit = "0".."7"
	bit = "0" | "1"
	booleanLiteral = "@true" | "@false"

	// SPACE, WHITESPACE and SEPARATORS
	space := whitespace | lineTerminator | comment
	unicodeSpaceSeparator = "\u2000".."\u200B" | "\u3000"
	whitespace = "\t"
			| "\x0B"    --verticalTab
			| "\x0C"    --formFeed
			| " "
			| "\u00A0"  --noBreakSpace
			| "\uFEFF"  --byteOrderMark
			| unicodeSpaceSeparator
}